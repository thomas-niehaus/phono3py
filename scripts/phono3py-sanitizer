#!/usr/bin/env python

# Copyright (C) 2011 Atsushi Togo
# All rights reserved.
#
# This file is part of phonopy.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# * Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in
#   the documentation and/or other materials provided with the
#   distribution.
#
# * Neither the name of the phonopy project nor the names of its
#   contributors may be used to endorse or promote products derived
#   from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

import sys
del_i = []
for i, p in enumerate(sys.path):
    if 'dist-packages' in p:
        del_i.append(i)
    if 'local' in p:
        del_i.append(i)
for i in del_i:
    del sys.path[i]
print(sys.path)

import h5py
import numpy as np
from phonopy.interface.vasp import read_vasp
from phonopy.file_IO import parse_BORN, write_FORCE_SETS, parse_FORCE_SETS
from phono3py.file_IO import read_phonon_from_hdf5
from phonopy.units import VaspToTHz, PwscfToTHz, Bohr, Rydberg, Hartree
from phonopy.version import __version__
from phonopy.interface import read_crystal_structure
from phono3py.file_IO import (parse_disp_fc2_yaml, parse_disp_fc3_yaml,
                              parse_FORCES_FC2, parse_FORCES_FC3,
                              write_FORCES_FC2, write_FORCES_FC3)
from phono3py.cui.settings import Phono3pyConfParser
from phono3py.phonon3 import (Phono3py, Phono3pyJointDos, Phono3pyIsotope)
from phono3py.phonon3.gruneisen import get_gruneisen_parameters
from phono3py.cui.phono3py_argparse import get_parser
from phono3py.cui.show_log import (print_phono3py, print_version, print_end,
                                   print_error, print_error_message,
                                   show_phono3py_settings,
                                   show_phono3py_cells, file_exists)
from phono3py.cui.triplets_info import write_grid_points, show_num_triplets
from phono3py.cui.translate_settings import get_phono3py_configurations
from phono3py.cui.create_supercells import create_phono3py_supercells
from phono3py.cui.create_force_constants import create_phono3py_force_constants
from phono3py.cui.phono3py_yaml import Phono3pyYaml

def finalize_phono3py(log_level,
                      phonop3y_conf,
                      phono3py,
                      interface_mode,
                      filename="phono3py.yaml"):
    if log_level > 0:
        ph3py_yaml = Phono3pyYaml(configuration=phono3py_conf.get_configures(),
                                  calculator=interface_mode)
        ph3py_yaml.set_phonon_info(phono3py)
        with open(filename, 'w') as w:
            w.write(str(ph3py_yaml))
        print_end()
    sys.exit(0)

phono3py_version = __version__

# Parse arguments
parser = get_parser()
(options, args) = parser.parse_args()
option_list = parser.option_list

# Log level
log_level = 1
if options.verbose:
    log_level = 2
if options.quiet:
    log_level = 0
if options.log_level is not None:
    log_level=options.log_level

#
# Phono3py interface mode
#
# Physical units: energy,  distance,  atomic mass, force
# vasp          : eV,      Angstrom,  AMU,         eV/Angstrom
# pwscf         : Ry,      au,        AMU,         Ry/au
#
if options.pwscf_mode:
    interface_mode = 'pwscf'
    from phonopy.interface.pwscf import (write_supercells_with_displacements,
                                         parse_set_of_forces)
    energy_to_eV = Rydberg
    distance_to_A = Bohr
elif options.dftb_mode: 
    interface_mode = 'dftbp'
    from phonopy.interface.dftbp import (write_supercells_with_displacements,
                                         parse_set_of_forces)
    energy_to_eV = Hartree
    distance_to_A = Bohr
else:
    interface_mode = 'vasp'
    from phonopy.interface.vasp import (write_supercells_with_displacements,
                                        parse_set_of_forces)
    energy_to_eV = None
    distance_to_A = None

# Input and output filename extension
input_filename = options.input_filename
output_filename = options.output_filename
if options.input_output_filename is not None:
    input_filename = options.input_output_filename
    output_filename = options.input_output_filename

# Title
if log_level:
    print_phono3py()
    print_version(phono3py_version)

#####################
# Create FORCES_FC3 #
#####################
if options.forces_fc3_mode or options.forces_fc3_file_mode:
    if input_filename is None:
        filename = 'disp_fc3.yaml'
    else:
        filename = 'disp_fc3.' + input_filename + '.yaml'
    file_exists(filename, log_level)
    if log_level:
        print("Displacement dataset is read from %s." % filename)
    disp_dataset = parse_disp_fc3_yaml()

    if options.forces_fc3_file_mode:
        file_exists(args[0], log_level)
        filenames = [x.strip() for x in open(args[0])]
    else:
        filenames = args
    if interface_mode == 'pwscf':
        force_sets = parse_set_of_forces(disp_dataset['natom'], filenames)
    else:
        force_sets = parse_set_of_forces(disp_dataset['natom'], filenames)
    write_FORCES_FC3(disp_dataset, force_sets, filename="FORCES_FC3")
    
    if log_level:
        print("FORCES_FC3 has been created.")
        print_end()
    sys.exit(0)

#####################
# Create FORCES_FC2 #
#####################
if options.forces_fc2_mode:
    if input_filename is None:
        filename = 'disp_fc2.yaml'
    else:
        filename = 'disp_fc2.' + input_filename + '.yaml'
    file_exists(filename, log_level)
    if log_level:
        print("Displacement dataset is read from %s." % filename)
    disp_dataset = parse_disp_fc2_yaml()

    filenames = args
    if interface_mode == 'pwscf':
        force_sets = parse_set_of_forces(disp_dataset['natom'], filenames)
    else:
        force_sets = parse_set_of_forces(disp_dataset['natom'], filenames)
    write_FORCES_FC2(disp_dataset, forces_fc2=force_sets, filename="FORCES_FC2")

    if log_level:
        print("FORCES_FC2 has been created.")
        print_end()
    sys.exit(0)

if options.force_sets_to_forces_fc2_mode:
    filename = 'FORCE_SETS'
    file_exists(filename, log_level)
    disp_dataset = parse_FORCE_SETS(filename=filename)
    write_FORCES_FC2(disp_dataset)

    if log_level:
        print("FORCES_FC2 has been created from FORCE_SETS.")
        print_end()
    sys.exit(0)
    
#####################################
# Create FORCE_SETS from FORCES_FC* #
#####################################
if options.force_sets_mode:
    if options.phonon_supercell_dimension is not None:
        if input_filename is None:
            filename = 'disp_fc2.yaml'
        else:
            filename = 'disp_fc2.' + input_filename + '.yaml'
        file_exists(filename, log_level)
        disp_dataset = parse_disp_fc2_yaml()
        forces = parse_FORCES_FC2(disp_dataset)
    else:
        if input_filename is None:
            filename = 'disp_fc3.yaml'
        else:
            filename = 'disp_fc3.' + input_filename + '.yaml'
        file_exists(filename, log_level)
        disp_dataset = parse_disp_fc3_yaml()
        forces = parse_FORCES_FC3(disp_dataset)
        
    if log_level:
        print("Displacement dataset is read from %s." % filename)
        
    for force_set, disp1 in zip(forces, disp_dataset['first_atoms']):
        disp1['forces'] = force_set
    write_FORCE_SETS(disp_dataset)
    
    if log_level:
        print("FORCE_SETS has been created.")
        print_end()
    sys.exit(0)
    
##################
# Parse settings #
##################
if len(args) > 0:
    phono3py_conf = Phono3pyConfParser(filename=args[0],
                                       options=options,
                                       option_list=option_list)
    settings = phono3py_conf.get_settings()
else:
    phono3py_conf = Phono3pyConfParser(options=options,
                                       option_list=option_list)
    settings = phono3py_conf.get_settings()
    
#############
# Run modes #
#############
run_mode = None
if settings.get_is_gruneisen():
    run_mode = "gruneisen"
elif settings.get_is_joint_dos():
    run_mode = "jdos"
elif (settings.get_is_isotope() and
      not (settings.get_is_bterta() or settings.get_is_lbte())):
    run_mode = "isotope"
elif settings.get_is_linewidth():
    run_mode = "linewidth"
elif settings.get_is_imag_self_energy():
    run_mode = "imag_self_energy"
elif settings.get_is_frequency_shift():
    run_mode = "frequency_shift"
elif settings.get_is_bterta():
    run_mode = "conductivity-RTA"
elif settings.get_is_lbte():
    run_mode = "conductivity-LBTE"
elif settings.get_create_displacements():
    run_mode = "displacements"

if log_level and run_mode is not None:
    print("Run mode: %s" % run_mode)

##########################
# Read crystal structure #
##########################
unitcell, optional_structure_file_information = read_crystal_structure(
    filename=settings.get_cell_filename(),
    interface_mode=interface_mode,
    chemical_symbols=settings.get_chemical_symbols(),
    yaml_mode=settings.get_yaml_mode())
unitcell_filename = optional_structure_file_information[0]

if unitcell is None:
    print_error_message("Crystal structure file of %s could not be found." %
                        unitcell_filename)
    if log_level > 0:
        print_error()
    sys.exit(1)

# Check unit cell
if np.linalg.det(unitcell.get_cell()) < 0.0:
    print_error_message("Determinant of the lattice vector matrix "
                        "has to be positive.")
    if log_level > 0:
        print_end()
    sys.exit(0)

######################
# Translate settings #
######################
conf = get_phono3py_configurations(settings)
primitive_matrix = conf['primitive_matrix']
supercell_matrix = conf['supercell_matrix']
phonon_supercell_matrix = conf['phonon_supercell_matrix']
masses = conf['masses']
mesh = conf['mesh']
mesh_divs = conf['mesh_divs']
coarse_mesh_shifts = conf['coarse_mesh_shifts']
grid_points = conf['grid_points']
band_indices = conf['band_indices']
sigmas = conf['sigmas']
temperature_points = conf['temperature_points']
temperatures = conf['temperatures']
frequency_factor_to_THz = conf['frequency_factor_to_THz']
num_frequency_points = conf['num_frequency_points']
frequency_step = conf['frequency_step']
frequency_scale_factor = conf['frequency_scale_factor']
cutoff_frequency = conf['cutoff_frequency']

symprec = options.symprec

#################################################
# Create supercells with displacements and exit #
#################################################
if settings.get_create_displacements():
    phono3py = create_phono3py_supercells(
        unitcell,
        supercell_matrix,
        phonon_supercell_matrix,
        settings.get_displacement_distance(),
        settings.get_is_plusminus_displacement(),
        settings.get_is_diagonal_displacement(),
        settings.get_cutoff_pair_distance(),
        write_supercells_with_displacements,
        optional_structure_file_information,
        symprec,
        output_filename=output_filename,
        interface_mode=interface_mode,
        log_level=log_level)
    
    finalize_phono3py(log_level,
                      phono3py_conf,
                      phono3py,
                      interface_mode,
                      filename="phono3py_disp.yaml")

#################################################
# Change unit of lattice parameters to Angstrom #
#################################################
if distance_to_A is not None:
    lattice = unitcell.get_cell()
    lattice *= distance_to_A
    unitcell.set_cell(lattice)

#####################
# Initiate phono3py #
#####################
phono3py = Phono3py(
    unitcell,
    supercell_matrix,
    primitive_matrix=primitive_matrix,
    phonon_supercell_matrix=phonon_supercell_matrix,
    masses=masses,
    mesh=mesh,
    band_indices=band_indices,
    sigmas=sigmas,
    cutoff_frequency=cutoff_frequency,
    frequency_factor_to_THz=frequency_factor_to_THz,
    is_symmetry=settings.get_is_symmetry(),
    is_mesh_symmetry=settings.get_is_mesh_symmetry(),
    symmetrize_fc3_q=settings.get_is_symmetrize_fc3_q(),
    symprec=symprec,
    log_level=log_level,
    lapack_zheev_uplo=options.uplo)

supercell = phono3py.get_supercell()
primitive = phono3py.get_primitive()
phonon_supercell = phono3py.get_phonon_supercell()
phonon_primitive = phono3py.get_phonon_primitive()
symmetry = phono3py.get_symmetry()

if log_level:
    show_phono3py_cells(symmetry,
                        primitive,
                        supercell,
                        phonon_primitive,
                        phonon_supercell,
                        settings)

#####################################################  
# Write ir-grid points and grid addresses, and exit #
#####################################################
if options.write_grid_points:
    write_grid_points(primitive,
                      mesh,
                      mesh_divs,
                      coarse_mesh_shifts,
                      settings.get_is_kappa_star(),                  
                      symprec,
                      log_level)

    if log_level:
        print_end()
    sys.exit(0)

##################################################
# Show reduced number of triplets at grid points #
##################################################
if options.show_num_triplets:
    show_num_triplets(primitive,
                      mesh,
                      mesh_divs,
                      grid_points,
                      coarse_mesh_shifts,
                      settings.get_is_kappa_star(),                  
                      symprec,
                      log_level)    

    if log_level:
        print_end()
    sys.exit(0)

###################
# Force constants #
###################
create_phono3py_force_constants(phono3py,
                                phonon_supercell_matrix,
                                settings,
                                energy_to_eV=energy_to_eV,
                                distance_to_A=distance_to_A,
                                input_filename=input_filename,
                                output_filename=output_filename,
                                log_level=log_level)

##################################
# Non-analytical term correction #
##################################
if settings.get_is_nac():
    file_exists('BORN', log_level)
    nac_params = parse_BORN(phonon_primitive)
    nac_factor = Hartree * Bohr
    if nac_params['factor'] is None:
        pass
    elif abs(nac_params['factor'] - nac_factor) > 1e-4:
        print("-" * 22 + " Non-analytical term correction " + "-" * 22)
        print("NAC unit conversion factor in BORN file %f was ignored." %
              nac_params['factor'])
        print("Instead, the default value %6.4f is used." % nac_factor)
    nac_params['factor'] = nac_factor
    nac_q_direction = settings.get_nac_q_direction()
else:
    nac_params = None
    nac_q_direction = None

##############################
# Phonon Gruneisen parameter #
##############################
if settings.get_is_gruneisen():
    if (mesh is None and
        settings.get_bands() is None and
        settings.get_qpoints() is None):
        print("An option of --mesh, --band, or --qpoints has to be specified.")
        if log_level:
            print_error()
        sys.exit(1)

    if len(phono3py.get_fc2()) != len(phono3py.get_fc3()):
        print("Supercells used for fc2 and fc3 have to be same.")
        if log_level:
            print_error()
        sys.exit(1)

    gruneisen = get_gruneisen_parameters(phono3py.get_fc2(),
                                         phono3py.get_fc3(),
                                         supercell,
                                         primitive,
                                         settings.get_bands(),
                                         mesh,
                                         settings.get_qpoints(),
                                         nac_params=nac_params,
                                         nac_q_direction=nac_q_direction,
                                         ion_clamped=settings.get_ion_clamped(),
                                         factor=VaspToTHz,
                                         symprec=symprec,
                                         output_filename=output_filename,
                                         log_level=log_level)

    if log_level:
        print_end()
    sys.exit(0)

#################
# Show settings #
#################
if log_level and run_mode is not None:
    show_phono3py_settings(settings,
                           mesh,
                           mesh_divs,
                           band_indices,
                           sigmas,
                           temperatures,
                           temperature_points,
                           grid_points,
                           cutoff_frequency,
                           frequency_factor_to_THz,
                           frequency_step,
                           num_frequency_points,
                           log_level)
    
#############
# Joint DOS #
#############
if run_mode == "jdos":
    joint_dos = Phono3pyJointDos(
        phonon_supercell,
        phonon_primitive,
        mesh,
        phono3py.get_fc2(),
        nac_params=nac_params,
        nac_q_direction=nac_q_direction,
        sigmas=sigmas,
        cutoff_frequency=cutoff_frequency,
        frequency_step=frequency_step,
        num_frequency_points=num_frequency_points,
        temperatures=temperature_points,
        frequency_factor_to_THz=frequency_factor_to_THz,
        frequency_scale_factor=frequency_scale_factor,
        is_mesh_symmetry=settings.get_is_mesh_symmetry(),
        symprec=symprec,
        output_filename=output_filename,
        log_level=log_level)
    joint_dos.run(grid_points)
    if log_level:
        print_end()
    sys.exit(0)
    
#############################
# Phonon-isotope scattering #
#############################
if settings.get_is_isotope() and settings.get_mass_variances() is None:
    from phonopy.structure.atoms import isotope_data
    symbols = phonon_primitive.get_chemical_symbols()
    in_database = True
    for s in set(symbols):
        if not s in isotope_data:
            print("%s is not in the list of isotope databese" % s)
            print("(not implemented).")
            print("Use --mass_variances option.")
            in_database = False
    if not in_database:
        if log_level:
            print_end()
        sys.exit(0)

###########################
# Phonon-isotope lifetime #
###########################
if run_mode == "isotope":
    mass_variances = settings.get_mass_variances()
    if band_indices is not None:
        band_indices = np.hstack(band_indices).astype('intc')
    iso = Phono3pyIsotope(
        mesh,
        phonon_primitive,
        mass_variances=mass_variances,
        band_indices=band_indices,
        sigmas=sigmas,
        frequency_factor_to_THz=frequency_factor_to_THz,
        symprec=symprec,
        cutoff_frequency=settings.get_cutoff_frequency(),
        lapack_zheev_uplo=options.uplo)
    iso.set_dynamical_matrix(phono3py.get_fc2(),
                             phonon_supercell,
                             phonon_primitive,
                             nac_params=nac_params,
                             frequency_scale_factor=frequency_scale_factor)
    iso.run(grid_points)
    if log_level:
        print_end()
    sys.exit(0)

#############################
# Phonon-phonon interaction #
#############################
if run_mode is not None:
    ave_pp = settings.get_constant_averaged_pp_interaction()
    phono3py.set_phph_interaction(
        nac_params=nac_params,
        nac_q_direction=nac_q_direction,
        constant_averaged_interaction=ave_pp,
        frequency_scale_factor=frequency_scale_factor,
        unit_conversion=settings.get_pp_conversion_factor())
    if settings.get_write_phonon():
        filename = phono3py.write_phonons(filename=output_filename)
        if filename:
            if log_level:
                print("All phonons on grid points are written into %s." %
                      filename)
                print_end()
            sys.exit(0)
        else:
            print("Writing phonons failed.")
            if log_level:
                print_error()
            sys.exit(1)
    if settings.get_read_phonon():
        phonons = read_phonon_from_hdf5(mesh,
                                        filename=input_filename,
                                        verbose=log_level)
        if phonons[0] is None:
            print("Reading phonons from %s failed." % phonons[4])
            if log_level:
                print_error()
            sys.exit(1)
        frequencies = phonons[0]
        eigenvectors = phonons[1]
        grid_address = phonons[3]
        if phono3py.set_phonon_data(frequencies, eigenvectors, grid_address):
            if log_level:
                print("Phonons are read from %s." % phonons[4])
        else:
            print("Phonon data in %s are inconsistent to the calculation "
                  "setting." % phonons[4])
            if log_level:
                print_error()
            sys.exit(1)

if run_mode == "linewidth":
    if grid_points is None:
        print("Grid point(s) has to be specified with --gp or --ga option.")
        if log_level:
            print_error()
        sys.exit(1)
    phono3py.run_linewidth(
        grid_points,
        temperatures=temperatures,
        run_with_g=settings.get_run_with_g(),
        write_gamma_detail=settings.get_write_gamma_detail())
    phono3py.write_linewidth(filename=output_filename)
elif run_mode == "imag_self_energy":
    if not settings.get_run_with_g() and settings.get_scattering_event_class():
        print("--run_without_g and --scattering_event_class can not used "
              "together.")
        if log_level:
            print_error()
        sys.exit(1)
    if grid_points is None:
        print("Grid point(s) has to be specified with --gp or --ga option.")
        if log_level:
            print_error()
        sys.exit(1)
    phono3py.run_imag_self_energy(
        grid_points,
        frequency_step=frequency_step,
        num_frequency_points=num_frequency_points,
        temperatures=temperature_points,
        scattering_event_class=settings.get_scattering_event_class(),
        run_with_g=settings.get_run_with_g(),
        write_gamma_detail=settings.get_write_gamma_detail())
    phono3py.write_imag_self_energy(filename=output_filename)
elif run_mode == "frequency_shift":
    phono3py.get_frequency_shift(
        grid_points,
        temperatures=temperatures,
        output_filename=output_filename)
elif run_mode == "conductivity-RTA" or run_mode == "conductivity-LBTE":
    phono3py.run_thermal_conductivity(
        is_LBTE=settings.get_is_lbte(),
        temperatures=temperatures,
        is_isotope=settings.get_is_isotope(),
        mass_variances=settings.get_mass_variances(),
        grid_points=grid_points,
        boundary_mfp=settings.get_boundary_mfp(),
        use_ave_pp=settings.get_use_ave_pp(),
        gamma_unit_conversion=settings.get_gamma_conversion_factor(),
        mesh_divisors=mesh_divs,
        coarse_mesh_shifts=settings.get_coarse_mesh_shifts(),
        is_reducible_collision_matrix=settings.get_is_reducible_collision_matrix(),
        is_kappa_star=settings.get_is_kappa_star(),
        gv_delta_q=settings.get_group_velocity_delta_q(),
        run_with_g=settings.get_run_with_g(),
        is_full_pp=settings.get_is_full_pp(),
        pinv_cutoff=settings.get_pinv_cutoff(),
        write_gamma=settings.get_write_gamma(),
        read_gamma=settings.get_read_gamma(),
        write_kappa=True,
        is_N_U=settings.get_is_N_U(),
        write_gamma_detail=settings.get_write_gamma_detail(),
        write_collision=settings.get_write_collision(),
        read_collision=settings.get_read_collision(),
        input_filename=input_filename,
        output_filename=output_filename)
else:
    if log_level:
        print("*" * 15 + " None of ph-ph interaction was calculated. " +
              "*" * 16)

finalize_phono3py(log_level, phono3py_conf, phono3py, interface_mode)
